- name: setup group
  action: group name={{group_name}} state=present
- name: setup user
  action: user name={{user_name}} state=present group={{group_name}}
- name: setup directory for the unix socket
  action: file path=/var/run/{{app_name}} owner={{user_name}} group={{group_name}} state=directory
- name: set up apt packages
  action: apt pkg={{item}} state=latest update_cache=yes
  with_items: required_apt_packages
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
- name: install EPEL
  action: yum pkg=epel-release state=latest
  when: ansible_distribution == 'CentOS'
- name: set up yum packages
  action: yum pkg={{item}} state=latest update_cache=yes
  with_items: required_yum_packages
  when: ansible_distribution == 'CentOS'
- name: set up pacman packages
  action: pacman pkg={{item}} state=latest update_cache=yes
  with_items: required_pacman_packages
  when: ansible_distribution == 'Archlinux'
- name: ensure directories
  action: file state=directory path={{item}} owner={{user_name}} group={{group_name}}
  with_items:
    - "{{deploy_root}}"
    - "{{deploy_root}}/conf.d"
- service: name=redis-server state=started
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
- service: name=redis state=started
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Archlinux'
- name: nginx running
  action: service name=nginx state=started
- name: ensure no nginx default conf
  action: file path=/etc/nginx/sites-enabled/default state=absent
  notify: reload nginx config
- include: configuration.yml
- name: copy source
  copy: src=../src_pkg.tar.gz dest={{webapp_archive_location}}
  register: sources
  notify: reload nginx config
- include: install_sources.yml
  when: sources.changed or configuration.changed
- name: install systemd service
  action: template src=../templates/gunicorn.service.j2 dest=/lib/systemd/system/{{app_name}}-wsgi.service
  when: sources.changed or configuration.changed
  register: systemd_change
- name: install systemd service (Celery worker)
  action: template src=../templates/celery-worker.service.j2 dest=/lib/systemd/system/{{app_name}}-celery-worker.service
  when: sources.changed or configuration.changed
  register: systemd_change
- name: install systemd service (Celery beat)
  action: template src=../templates/celery-beat.service.j2 dest=/lib/systemd/system/{{app_name}}-celery-beat.service
  when: sources.changed or configuration.changed
  register: systemd_change
- name: reload systemd daemon
  action: shell systemctl daemon-reload
  when: systemd_change.changed
- name: enable the services
  action: service name={{item}} enabled=true state=restarted
  with_items:
    - "{{app_name}}-wsgi"
    - "{{app_name}}-celery-worker"
    - "{{app_name}}-celery-beat"
  when: systemd_change.changed
- name: try to get local page
  shell: curl http://localhost/
